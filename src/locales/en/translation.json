{
  "welcome": "Welcome to the React App!",
  "toggle_theme": "Toggle Theme",
  "toggle_language": "Toggle Language",
  "current_language": "Current Language: English",
  "navigation": {
    "home": "Home",
    "about": "About Me",
    "mentoring": "Mentoring",
    "development": "Development",
    "portfolio": "Portfolio",
    "logo_aria_label": "Open Home page",
    "menu": "Menu"
  },
  "home": {
    "title": "Hi, I'm Veronika üëãüèª<br/>Frontend developer <br/><small>& UX Enthusiast</small>",
    "desc": "<p>Yes, I'm that person who opens Figma and isn't scared.</p><p>I transform layouts into clean, adaptive markup ‚Äî so everything looks right in Chrome, Safari, and even IE (just kidding, no one looks at IE anymore... I hope).</p>",
    "CTA_portfolio": "View portfolio",
    "CTA_contact": "Invite to a project"
  },
  "portfolio": {
    "title": "Portfolio",
    "description": "My works will be here."
  },
  "development": {
    "title": "Development",
    "description": "<p>I design in code ‚Äî turning static mockups into solid, production-ready interfaces ‚Äî responsive, clean, and maintainable.</p><p><strong>React + TypeScript</strong> is where I'm fastest, but I speak <strong>Vue</strong> and <strong>Angular</strong> fluently. Structure, logic, and style all get their place ‚Äî no chaos, no duct tape.</p><p>I write code with a future in mind ‚Äî readable today, understandable tomorrow, and not embarrassing a year from now.</p>"
  },
  "mentoring": {
    "title": "Mentoring",
    "description": "Information about mentoring will be here."
  },
  "skills": {
    "title": "What's in my toolkit?",
    "desc": "Aside from a steady mind and a stockpile of coffee",
    "categories": [
      {
        "key": "markup",
        "title": "Solid Markup",
        "items": [
          {
            "title": "HTML: Structure With Purpose",
            "description": "Markup is architecture, not just tags. I shape the page from meaningful blocks to proper heading flow. Semantics are for real people, not just to pleasing validators.",
            "icon": "DevelopmentIcon"
          },
          {
            "title": "Accessibility (a11y)",
            "description": "<b>WCAG</b> standards? Check. <b>ARIA</b> roles used as intended. Screen readers (<b>NVDA</b>, <b>VoiceOver</b>), keyboard navigation, <code>focus</code> states ‚Äî all tested. Respect <code>prefers-*</code>, <code>pointer</code>, color settings and etc.",
            "icon": "PersonStanding"
          },
          {
            "title": "Responsive & Cross-Browser",
            "description": "Designed for humans ‚Äî not just perfect mockups. Retina screens, breakpoints, awkward <b>DPI</b>s, <b>Safari</b> quirks ‚Äî all taken into account before QA raises a brow.",
            "icon": "RwdIcon"
          },
          {
            "title": "BEM Naming",
            "description": "Readable, purposeful class names are non-negotiable. Modifiers aren't mixes, roles aren't blurred, and every class does exactly one thing ‚Äî and says so.",
            "icon": "SiBem"
          }
        ]
      },
      {
        "key": "styling",
        "title": "Clean and Flexible Styling",
        "items": [
          {
            "title": "Smart CSS: Variables, Layers, Containers",
            "description": "<code>!important</code> stays untouched ‚Äî I manage the cascade cleanly. Custom properties keep styles flexible. <b>Media queries</b> cover more than breakpoints: <code>hover</code>, <code>orientation</code>, user quirks ‚Äî I'm on it.",
            "additionalClassName": "fill",
            "icon": "SiCss"
          },
          {
            "title": "Preprocessors",
            "description": "<b>Sass</b> is second nature ‚Äî from <code>functions</code> to <code>placeholders</code> and deep nesting logic. Styles stay clean and maintainable. <b>Less</b> or <b>Stylus</b>? Not a problem.",
            "icon": "SiSass"
          },
          {
            "title": "CSS Modules",
            "description": "Scoped styles = zero drama. No global leaks, no naming accidents. Easy to reuse, easy to scale, easy for teammates to trust.",
            "icon": "SiCssmodules"
          },
          {
            "title": "CSS-in-JS",
            "description": "When styles live in the component, context and logic go side by side. <b>Styled Components</b> or <b>Emotion</b> ‚Äî used both in production more than once.",
            "icon": "SiStyledcomponents"
          },
          {
            "title": "Storybook",
            "description": "Components come with documentation. <b>Storybook</b> shows everything ‚Äî edge cases included. Great for designers, <b>QAs</b>, and future me. No need to ask, <i>'What does this look like?'</i>",
            "icon": "SiStorybook"
          }
        ]
      },
      {
        "key": "uiux",
        "title": "UI with a Human Touch",
        "items": [
          {
            "title": "Interactivity",
            "description": "No gimmicks, just smooth experience. <code>hover</code>s, <code>click</code>s, navigation ‚Äî behave the way users intuitively expect. Predictable, not boring. Familiar, not rigid.",
            "icon": "MousePointerClick"
          },
          {
            "title": "Animations",
            "description": "From subtle microinteractions to timeline beasts. <b>CSS</b> handles the light stuff, <b>GSAP</b> brings choreography. Every motion earns its place ‚Äî to guide the user, not just decorate.",
            "icon": "Wand2"
          },
          {
            "title": "Figma",
            "description": "Design files don't need decoding. I get <b>auto layout</b>, <b>constraints</b>, <b>components</b> ‚Äî and know where to look when something's off. Catch inconsistencies, clarify logic, and bring the mockup to life.",
            "icon": "SiFigma"
          },
          {
            "title": "UI Kits ‚â† Gospel",
            "description": "I'm analyzing UI kits, not just accept. Missing states? Weird spacing? Logic gaps? All spotted. Always open to ask, suggest, and adapt ‚Äî not blindly follow.",
            "icon": "CreativeIcon"
          },
          {
            "title": "UI Libraries (MUI, AntD, CDS etc.)",
            "description": "I've gone deeper than the docs. Know how <code>themes</code>, <code>slots</code>, <code>styled</code> APIs, internal <code>hooks</code>, and override system stick. Integration is clean, no hacks, no fragile band-aids.",
            "additionalClassName": "fill",
            "icon": "Paintbrush"
          }
        ]
      },
      {
        "key": "code",
        "title": "Logic, Types & Behavior Control",
        "items": [
          {
            "title": "JavaScript",
            "description": "From <code>DOM</code> to <code>event handling</code> ‚Äî everything to make the interface feel alive. <b>ES6</b> features like <code>destructuring</code> and <code>arrow functions</code>? Of course. Logic stays lean and in sync with the markup.",
            "icon": "SiJavascript"
          },
          {
            "title": "TypeScript",
            "description": "Types are a design tool, not just a safety net. From <code>prop</code> definitions to <code>utility types</code> and <code>generics</code> ‚Äî everything's there to keep the codebase confident and honest.",
            "icon": "SiTypescript"
          },
          {
            "title": "React",
            "description": "<b>React</b> isn't just a library ‚Äî it's a mindset. <code>props</code> and <code>state</code> link data and UI. <code>effects</code>, <code>callbacks</code>, <code>memoization</code> ‚Äî used where they matter. Not over-engineered, not under-thought.",
            "icon": "SiReact"
          },
          {
            "title": "Vue",
            "description": "Reactive core, <code>computed props</code>, and <code>directives</code> ‚Äî all understood and used to keep logic separate from markup. Templates stay clean, scripts stay smart. No spaghetti.",
            "icon": "SiVuedotjs"
          },
          {
            "title": "Angular",
            "description": "Strict but reliable. I use <code>containers</code>, <code>directives</code>, <code>input/output binding</code> ‚Äî and write component logic that stays clear and testable. Behavior is defined cleanly with <code>methods</code>.",
            "icon": "SiAngular"
          },
          {
            "title": "Linters & Code Style",
            "description": "<b>ESLint</b>, <b>Prettier</b>, <b>Stylelint</b> ‚Äî configured per team and project. Consistent style = stable project. Automation takes care of the routine, so focus stays on the logic.",
            "icon": "SiStylelint"
          }
        ]
      },
      {
        "key": "additional",
        "title": "And also:",
        "items": [
          {
            "title": "Fast adaptation",
            "description": "New stack? No problem. The main thing is not to look for \"how to make it beautiful\", but to understand why it doesn't work.",
            "icon": "Lightbulb"
          },
          {
            "title": "Version control systems",
            "description": "I know how to roll back not only in life, but also by commits. I navigate <code>branches</code>, resolve <code>conflicts</code>. I can <code>cherry-pick</code> if necessary. I have used <b>GitHub</b>, <b>GitLab</b>, <b>Bitbucket</b> and am familiar with <b>Git Flow</b>.",
            "icon": "GitBranch"
          },
          {
            "title": "Development Methodologies",
            "description": "I have worked with various approaches: <b>Agile</b> (<b>Scrum</b>) ‚Äî for flexible and changing projects, <b>Waterfall</b> ‚Äî for clearly planned and stable ones, and <b>Kanban</b> ‚Äî for optimizing workflow in small teams or for support.",
            "icon": "LayoutPanelTop"
          },
          {
            "title": "Soft skills",
            "description": "I know how to work in a team, share knowledge, and am not afraid to ask questions. I interact closely with designers, testers, and managers to create a quality product.",
            "icon": "Handshake"
          }
        ]
      }
    ]
  },
  "footer": {
    "copyright": "Copyright ¬© Veronika Novikova",
    "socials_title": "Socials",
    "links_title": "Links"
  },
  "prices": {
    "title": "Web development prices",
    "cards": [
      {
        "title": "Website from scratch",
        "description": "You only have designer mockups, I can choose the tech stack",
        "price": "$18/hr"
      },
      {
        "title": "New components, features or pages",
        "description": "You already have a working site and designer mockups to implement",
        "price": "$20/hr"
      },
      {
        "title": "Redesign of an existing site",
        "description": "Your site needs an update and you want to hire me for this. Please check my tech stack first.",
        "price": "$23/hr"
      },
      {
        "title": "Support for an existing project",
        "description": "Bug fixing / troubleshooting",
        "price": "$20/hr"
      }
    ]
  }
}