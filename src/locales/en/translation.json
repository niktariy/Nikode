{
  "welcome": "Welcome to the React App!",
  "toggle_theme": "Toggle Theme",
  "toggle_language": "Toggle Language",
  "current_language": "Current Language: English",
  "navigation": {
    "home": "Home",
    "about": "About Me",
    "mentoring": "Mentoring",
    "development": "Development",
    "portfolio": "Portfolio",
    "logo_aria_label": "Open Home page"
  },
  "home": {
    "title": "Hi, I'm Veronika üëãüèª<br/>Frontend developer <br/><small>& UX Enthusiast</small>",
    "desc": "<p>Yes, I'm that person who opens Figma and isn't scared.</p><p>I transform layouts into clean, adaptive markup ‚Äî so everything looks right in Chrome, Safari, and even IE (just kidding, no one looks at IE anymore... I hope).</p><p>My main focus is <strong>React (TypeScript)</strong>, but I also comfortably work with Vue and Angular.",
    "CTA_portfolio": "View portfolio",
    "CTA_contact": "Invite to a project"
  },
  "about": {
    "title": "Veronika Khalikova",
    "description": ""
  },
  "portfolio": {
    "title": "Portfolio",
    "description": "My works will be here."
  },
  "development": {
    "title": "Development",
    "description": "Information about development will be here."
  },
  "mentoring": {
    "title": "Mentoring",
    "description": "Information about mentoring will be here."
  },
  "skills": {
    "title": "What's in my toolkit?",
    "desc": "Aside from a steady mind and a stockpile of coffee",
    "markup": {
      "title": "Solid Markup",
      "html": {
        "title": "HTML: Structure With Purpose",
        "description": "Markup is architecture, not just tags. I shape the page from meaningful blocks to proper heading flow. Semantics are for real people, not just to pleasing validators."
      },
      "a11y": {
        "title": "Accessibility (a11y)",
        "description": "WCAG standards? Check. ARIA roles used as intended. Screen readers (NVDA, VoiceOver), keyboard navigation, focus states ‚Äî all tested. Respect `prefers-*`, `pointer`, color settings and etc."
      },
      "responsive_crossbrowser": {
        "title": "Responsive & Cross-Browser",
        "description": "Designed for humans ‚Äî not just perfect mockups. Retina screens, breakpoints, awkward DPIs, Safari quirks ‚Äî all taken into account before QA raises a brow."
      },
      "bem": {
        "title": "BEM Naming",
        "description": "Readable, purposeful class names are non-negotiable. Modifiers aren‚Äôt mixes, roles aren‚Äôt blurred, and every class does exactly one thing ‚Äî and says so."
      }
    },
    "styling": {
      "title": "Clean and Flexible Styling",
      "css": {
        "title": "Smart CSS: Variables, Layers, Containers",
        "description": "!important stays untouched ‚Äî I manage the cascade cleanly. Custom properties keep styles flexible. Media queries cover more than breakpoints: hover, orientation, user quirks ‚Äî I‚Äôm on it."
      },
      "preprocessors": {
        "title": "Preprocessors",
        "description": "Sass is second nature ‚Äî from functions to placeholders and deep nesting logic. Styles stay clean and maintainable. Less or Stylus? Not a problem."
      },
      "css_modules": {
        "title": "CSS Modules",
        "description": "Scoped styles = zero drama. No global leaks, no naming accidents. Easy to reuse, easy to scale, easy for teammates to trust."
      },
      "css_in_js": {
        "title": "CSS-in-JS",
        "description": "When styles live in the component, context and logic go side by side. Styled Components or Emotion ‚Äî used both in production more than once."
      },
      "storybook": {
        "title": "Storybook",
        "description": "Components come with documentation. Storybook shows everything ‚Äî edge cases included. Great for designers, QAs, and future me. No need to ask, 'What does this look like?'"
      }
    },
    "uiux": {
      "title": "UI with a Human Touch",
      "interactivity": {
        "title": "Interactivity",
        "description": "No gimmicks, just smooth experience. Hovers, clicks, navigation ‚Äî behave the way users intuitively expect. Predictable, not boring. Familiar, not rigid."
      },
      "animations": {
        "title": "Animations",
        "description": "From subtle microinteractions to timeline beasts. CSS handles the light stuff, GSAP brings choreography. Every motion earns its place ‚Äî to guide the user, not just decorate."
      },
      "figma": {
        "title": "Figma",
        "description": "Design files don‚Äôt need decoding. I get auto layout, constraints, components ‚Äî and know where to look when something‚Äôs off. Catch inconsistencies, clarify logic, and bring the mockup to life."
      },
      "ui_kit": {
        "title": "UI Kits ‚â† Gospel",
        "description": "I'm analyzing UI kits, not just accept. Missing states? Weird spacing? Logic gaps? All spotted. Always open to ask, suggest, and adapt ‚Äî not blindly follow."
      },
      "ui_libs": {
        "title": "UI Libraries (MUI, AntD, CDS etc.)",
        "description": "I‚Äôve gone deeper than the docs. Know how themes, slots, styled APIs, internal hooks, and override system stick. Integration is clean, no hacks, no fragile band-aids."
      }
    },
    "code": {
      "title": "Logic, Types & Behavior Control",
      "javascript": {
        "title": "JavaScript",
        "description": "From DOM to event handling ‚Äî everything to make the interface feel alive. ES6 features like destructuring and arrow functions? Of course. Logic stays lean and in sync with the markup."
      },
      "typescript": {
        "title": "TypeScript",
        "description": "Types are a design tool, not just a safety net. From prop definitions to utility types and generics ‚Äî everything‚Äôs there to keep the codebase confident and honest."
      },
      "react": {
        "title": "React",
        "description": "React isn‚Äôt just a library ‚Äî it‚Äôs a mindset. Props and states link data and UI. Effects, callbacks, memoization ‚Äî used where they matter. Not over-engineered, not under-thought. "
      },
      "vue": {
        "title": "Vue",
        "description": "Reactive core, computed props, and directives ‚Äî all understood and used to keep logic separate from markup. Templates stay clean, scripts stay smart. No spaghetti."
      },
      "angular": {
        "title": "Angular",
        "description": "Strict but reliable. I use containers, directives, input/output binding ‚Äî and write component logic that stays clear and testable. Behavior is defined cleanly with methods."
      },
      "tooling": {
        "title": "Linters & Code Style",
        "description": "ESLint, Prettier, Stylelint ‚Äî configured per team and project. Consistent style = stable project. Automation takes care of the routine, so focus stays on the logic."
      }
    }

  },
  "social_links": {
    "github": "https://github.com/niktariy",
    "codepen": "https://codepen.io/niktariy"
  }
}